name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Build
      run: npm run build

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build

    - name: Check if NPM_TOKEN exists
      id: check_token
      run: |
        if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
          echo "has_token=true" >> $GITHUB_OUTPUT
        else
          echo "has_token=false" >> $GITHUB_OUTPUT
        fi

    - name: Check if version has changed
      id: check_version
      if: steps.check_token.outputs.has_token == 'true'
      run: |
        # Get local version from package.json
        LOCAL_VERSION=$(node -p "require('./package.json').version")
        echo "Local version: $LOCAL_VERSION"

        # Get published version from npm
        NPM_VERSION=$(npm view next-lite-framework version 2>/dev/null || echo "0.0.0")
        echo "Published version: $NPM_VERSION"

        # Compare versions
        if [ "$LOCAL_VERSION" != "$NPM_VERSION" ]; then
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "Version has changed: $NPM_VERSION -> $LOCAL_VERSION"
        else
          echo "version_changed=false" >> $GITHUB_OUTPUT
          echo "Version has not changed: $LOCAL_VERSION"
        fi

    - name: Publish to npm
      if: steps.check_token.outputs.has_token == 'true' && steps.check_version.outputs.version_changed == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN || '' }}

    - name: Skip publishing (no version change)
      if: steps.check_token.outputs.has_token == 'true' && steps.check_version.outputs.version_changed != 'true'
      run: echo "Skipping npm publish because version has not changed"

    - name: Skip publishing (no NPM token)
      if: steps.check_token.outputs.has_token != 'true'
      run: echo "Skipping npm publish because NPM_TOKEN is not set"
